#!/usr/bin/env python

import pandas as pd
import numpy as np

def load_seg(file_name):
    with pd.HDFStore(file_name) as store:
        df = store.get('data')

    return df[df.selected]


if __name__ == "__main__":
    import os
    import argparse

    from heptrkx.nx_graph import utils_data
    from heptrkx.nx_graph import utils_io

    parser = argparse.ArgumentParser(description='Keras train pairs for each layer-pairs')
    add_arg = parser.add_argument
    add_arg('config', type=str, help='data configuration, configs/data.yaml')
    add_arg('--workers', type=int, help='number of threads', default=1)
    add_arg('--bidirection', action='store_true', help='use two-directions in graph')

    args = parser.parse_args()
    config_dir = args.config
    n_workers = args.workers


    import yaml
    assert(os.path.exists(config_dir))
    with open(config_dir) as f:
        config = yaml.load(f)


    mk_cfg = config['doublets_for_graph']
    evtids = mk_cfg['evtid']
    if type(evtids) is str:
        from heptrkx import list_from_str
        evtids = list_from_str(evtids)
    else:
        evtids = [evtids]

    pairs_input_dir = os.path.join(os.path.expandvars(mk_cfg['selected']), "evt{}".format(evtid))
    layers = mk_cfg['layers']
    min_hits = mk_cfg['min_hits']


    # load event
    from heptrkx.preprocess import utils_mldata
    hits, particles, truth, cells = utils_mldata.read_event(evtid, config_dir, info=True)
    hits = utils_data.merge_truth_info_to_hits(hits, particles, truth)

    # select hits in predefined layers
    if layers[0] > 0:
        hits = hits[hits.layer.isin(layers)]

    particle_hits = particles.merge(hits, on='particle_id', how='left')
    dp = particle_hits[~np.isnan(particle_hits.hit_id)]

    ## good particles are the particles that have at least *min_hits* hits
    good_particles = (dp.groupby('particle_id')['hit_id'].count() > min_hits-1).index.to_numpy()
    particles = particles[particles.particle_id.isin(good_particles)]
    del particle_hits
    del dp

    print("total hits: {}".format(hits.shape[0]))
    print("total particles: {}".format(particles.shape[0]))

    # find layer pairs
    from heptrkx import layer_pairs, select_pair_layers
    sel_layer_id = select_pair_layers(layers)

    # load segments 
    from functools import partial
    import multiprocessing as mp
    file_names = [os.path.join(pairs_input_dir, 'pair{:03d}.h5'.format(i))
                  for i in sel_layer_id]

    n_workers = args.workers
    print("workers: {}".format(n_workers))
    with  mp.Pool(processes=n_workers) as pool:
        all_segments = pool.map(load_seg, file_names)

    segments = pd.concat(all_segments, ignore_index=True)
    print("total edges: ",  segments.shape[0])

    # make a graph and save to disk
    output_dir = mk_cfg['out_graph']

    graph = utils_data.segments_to_nx(
        hits, segments,
        sender_hitid_name='hit_id_in',
        receiver_hitid_name='hit_id_out',
        solution_name='true', use_digraph=True, bidirection=args.bidirection)

    out_name = os.path.join(output_dir, 'evt{}'.format(evtid))
    utils_io.save_networkx(graph, out_name)
